version: '3.8'

services:
  # Kong Database
  kong-database:
    image: postgres:13
    container_name: kong-database
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
    networks:
      - app_network
    volumes:
      - kong_data:/var/lib/postgresql/data

  # # Kong API Gateway
  kong:
    image: kong:3.4.0
    ulimits:
      nofile:
        soft: 4096
        hard: 4096
    container_name: kong
    # restart: always
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_CASSANDRA_CONTACT_POINTS: none
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8006
      KONG_PROXY_LISTEN: 0.0.0.0:8005
    ports:
      - "8005:8005" # Public API requests
      - "8006:8006" # Admin API
      - "8443:8443" # Public API requests (HTTPS)
      - "8444:8444" # Admin API (HTTPS)
    networks:
      - app_network
    depends_on:
      - kong-database

  # Redis Service
  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - app_network

  auth_service:
    build:
      context: ../auth_service
      dockerfile: ../docker/Dockerfile.auth
    user: "${UID}:${GID}"
    volumes:
      - ../auth_service:/app
    container_name: auth_service
    env_file:
      - ../envs/.env_auth
    ports:
      - "8000:8000"
    environment:
      - PYTHONUNBUFFERED=1
      - CELERY_BROKER_URL=redis://redis:6379/0 # Celery Broker URL
    stdin_open: true
    tty: true
    networks:
      - app_network
    # depends_on:
    #   - db

  profile_service:
    build:
      context: ../profile_service
      dockerfile: ../docker/Dockerfile.profile
    user: "${UID}:${GID}"
    volumes:
      - ../profile_service:/app
    container_name: profile_service
    env_file:
      - ../envs/.env_profile
    ports:
      - "8001:8001"
      # - "8001:8000"
    environment:
      - PYTHONUNBUFFERED=1
      - CELERY_BROKER_URL=redis://redis:6379/0 # Celery Broker URL
    stdin_open: true
    tty: true
    networks:
      - app_network
    # depends_on:
    #   - db

  trade_service:
    build:
      context: ../trade_service
      dockerfile: ../docker/Dockerfile.trade
    user: "${UID}:${GID}"
    volumes:
      - ../trade_service:/app
    container_name: trade_service
    env_file:
      - ../envs/.env_trade
    ports:
      - "8002:8002"
      # - "8002:8000"
    environment:
      - PYTHONUNBUFFERED=1
      - CELERY_BROKER_URL=redis://redis:6379/0 # Celery Broker URL
    stdin_open: true
    tty: true
    networks:
      - app_network
    # depends_on:
    #   - db

  home_service:
    build:
      context: ../home_service
      dockerfile: ../docker/Dockerfile.home
    user: "${UID}:${GID}"
    volumes:
      - ../home_service:/app
    container_name: home_service
    env_file:
      - ../envs/.env_home
    ports:
      - "8003:8003"
      # - "8003:8000"
    environment:
      - PYTHONUNBUFFERED=1
      - CELERY_BROKER_URL=redis://redis:6379/0 # Celery Broker URL
    stdin_open: true
    tty: true
    networks:
      - app_network
    # depends_on:
    #   - db

  api_gateway:
    build:
      context: ../api_gateway
      dockerfile: ../docker/Dockerfile.gateway
    user: "${UID}:${GID}"
    volumes:
      - ../api_gateway:/app
    container_name: api_gateway
    env_file:
      - ../envs/.env_gateway
    ports:
      - "8004:8004"
    environment:
      - PYTHONUNBUFFERED=1
    stdin_open: true
    tty: true
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data:
  kong_data:

  # db:
  #   image: postgres:13
  #   container_name: postgres_db
  #   env_file:
  #     - ../envs/.env_db
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
